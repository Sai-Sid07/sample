First Hunk 

A bunch of lines here.

Don't cram all changes locally into one commit.
Group similar changes into one commit, but ensure that the commit doesn't get too big.
This would result in it getting hard for you and your team when keeping track of the changes.
Make use of the staging area concept to ensure that only necessary files for that commit are added and tracked.

Even if you are commiting one file, it could be split into multiple sections where a set of changes could be related to one topic while the other set of changes could be related to some other topic.
GitHub allows us to split the commits of a particular file using the git add -p (patch) filename and here we can choose which parts to include and which parts to not for that particular commit.
It checks all the changes done from the previous commit till now and asks you for each line change or delete.
In case there is an unchanged line between 2 changes, then you can split it into 2 hunks using the s (split) option. (Example shown with the first 2 lines (First Hunk))

Commit Messages - 
Subject: Concise summary of what happened (NOTE - In csse you find it hard to write something concise, then too many topics have been combined for the commit)
Body: More detailed explaination which talks about what is new from before, what is the reason for the change, any particular remarks or known bugs or anything extra that has to be known.

TIP - Type git commit and hit enter and a new commit message window would be shown. 
The first line would be the subject and leave a line below and the next sentence would be the body of that commit

Branching Strategies - 
Common convention is no direct commits. Only through merging or rebase or PRs.
Short-Lived branches - Based on long running branches and usually deleted when the feature or bug fix or the goal of the short lived branch has been merged with the main branch.

Pull Requests - 
Communicating about changes and reviewing code.
A Pull Request invites reviewers to provide feedback before merging repos.
Once the PR is approved, you can merge it to the main branch.
With PRs, you can contribute to read only repositories.
Note that Pull Requests are always focused on branches and not on individual commits.

Forks - 
Personal copy of a GIT repository
Make changes in the local version and make a PR to merge with the main repository.
In case of any changes, they can suggest changes to be made before merging with the main repository.

Merge Conflicts - 
When you merge changes (Integrating) from Different sources
Most of the times, GIT will figure things on its own. 

1. When you change the exact line of code in 2 different commits, git doesn't know which one to prefer when.

When a conflict has occured, git will let you know..

You can always undo a merge conflict and return to the previous state : git merge --abort or git rebase --abort

Merge vs Rebase - 
2 Most common ways to integrate branches and add in your work to the main branch.
    Merge :
        Git looks for 3 commits - Common Ancestor (The last common commit to both the commits on the 2 branches (the one you're working on and the one you want to commit)), last commit on both the branches 
        The simplest form of merge is called the fast-forward merge where both the branches share common commits.
    
    Rebase : 
        git rebase branchname
        Will temporarily remove the commits after the common ancestor commit.
        Will merge your commits from the commit ancestor and then place the removed commits after that.
        This will restructure the commit history.
        Do not use rebase on commits that you've already pushed or shared on a remote repository.
        
